import { Router } from "express";
import { collection, doc, getDoc, setDoc, updateDoc, deleteDoc } from "firebase/firestore";
import { db } from "../firebase";
import authenticateToken from "../middleware/authenticateToken";

const router = Router();

// üîé Seg√©df√ºggv√©ny a kos√°r dokumentum hivatkoz√°s√°hoz
const getCartDocRef = (userId: string) => doc(collection(db, "carts"), userId);

/**
 * üõí GET /carts/my-cart
 * Saj√°t kos√°r lek√©r√©se (hiteles√≠t√©st ig√©nyel)
 */
router.get("/my-cart", authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId;
    if (!userId) return res.status(400).json({ message: "Hi√°nyz√≥ felhaszn√°l√≥i azonos√≠t√≥." });

    const cartRef = getCartDocRef(userId);
    const cartDoc = await getDoc(cartRef);

    if (!cartDoc.exists()) {
      return res.status(200).json({ items: [] }); // √úres kos√°r, ha nincs dokumentum
    }

    res.status(200).json(cartDoc.data());
  } catch (error) {
    console.error("Hiba a kos√°r lek√©r√©sekor:", error);
    res.status(500).json({ message: "Hiba a kos√°r lek√©r√©sekor." });
  }
});

/**
 * ‚ûï POST /carts/add
 * Term√©k hozz√°ad√°sa a kos√°rhoz
 * üîë Header: Authorization: Bearer <token>
 * üìù Body p√©lda:
 * {
 *   "productId": "abc123",
 *   "quantity": 2
 * }
 */
router.post("/add", authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId;
    const { productId, quantity } = req.body;

    if (!userId || !productId || !quantity) {
      return res.status(400).json({ message: "Hi√°nyz√≥ mez≈ëk (userId, productId, quantity)." });
    }

    const cartRef = getCartDocRef(userId);
    const cartDoc = await getDoc(cartRef);

    let updatedItems = [];

    if (cartDoc.exists()) {
      const cartData = cartDoc.data();
      const existingItem = cartData.items.find((item: any) => item.productId === productId);

      if (existingItem) {
        // Ha l√©tezik, friss√≠tj√ºk a mennyis√©get
        updatedItems = cartData.items.map((item: any) =>
          item.productId === productId ? { ...item, quantity: item.quantity + quantity } : item
        );
      } else {
        // √öj term√©k a kos√°rhoz
        updatedItems = [...cartData.items, { productId, quantity }];
      }
    } else {
      // Nincs kos√°r dokumentum, √∫jat hozunk l√©tre
      updatedItems = [{ productId, quantity }];
    }

    await setDoc(cartRef, { userId, items: updatedItems, updatedAt: new Date() });
    res.status(200).json({ message: "Term√©k sikeresen hozz√°adva a kos√°rhoz." });
  } catch (error) {
    console.error("Hiba a term√©k hozz√°ad√°sakor:", error);
    res.status(500).json({ message: "Hiba a term√©k hozz√°ad√°sakor." });
  }
});

/**
 * üóëÔ∏è DELETE /carts/remove/:productId
 * Term√©k elt√°vol√≠t√°sa a kos√°rb√≥l
 */
router.delete("/remove/:productId", authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId;
    const { productId } = req.params;

    if (!userId || !productId) {
      return res.status(400).json({ message: "Hi√°nyz√≥ felhaszn√°l√≥i azonos√≠t√≥ vagy term√©kazonos√≠t√≥." });
    }

    const cartRef = getCartDocRef(userId);
    const cartDoc = await getDoc(cartRef);

    if (!cartDoc.exists()) {
      return res.status(404).json({ message: "Kos√°r nem tal√°lhat√≥." });
    }

    const updatedItems = cartDoc.data().items.filter((item: any) => item.productId !== productId);
    await updateDoc(cartRef, { items: updatedItems, updatedAt: new Date() });

    res.status(200).json({ message: "Term√©k elt√°vol√≠tva a kos√°rb√≥l." });
  } catch (error) {
    console.error("Hiba a term√©k elt√°vol√≠t√°sakor:", error);
    res.status(500).json({ message: "Hiba a term√©k elt√°vol√≠t√°sakor." });
  }
});

/**
 * üßπ DELETE /carts/clear
 * Kos√°r teljes ki√ºr√≠t√©se
 */
router.delete("/clear", authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.userId;

    if (!userId) {
      return res.status(400).json({ message: "Hi√°nyz√≥ felhaszn√°l√≥i azonos√≠t√≥." });
    }

    const cartRef = getCartDocRef(userId);
    await deleteDoc(cartRef);

    res.status(200).json({ message: "Kos√°r sikeresen ki√ºr√≠tve." });
  } catch (error) {
    console.error("Hiba a kos√°r t√∂rl√©sekor:", error);
    res.status(500).json({ message: "Hiba a kos√°r t√∂rl√©sekor." });
  }
});

export default router;
